// Package hugo Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.json
// params.json
package hugo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x4f\xbb\x6e\x84\x30\x10\xec\xf9\x8a\xd5\xd6\x77\x71\x92\x92\x6f\xb8\x34\x91\x52\x9d\xae\x58\x8c\x0f\x5b\x3c\x8c\xd6\x86\x28\x8a\xf8\xf7\x68\x6d\x03\x4a\x05\x33\x9e\x99\x9d\xf9\xad\x00\x90\x42\x30\x31\x60\x0d\x82\x00\x90\xcd\xec\xbf\x3e\x6f\x58\x03\xda\x18\xe7\x50\x2b\xd5\xb9\x68\x97\xe6\x45\xfb\x51\xd1\x3c\x07\xed\x5b\xa3\x42\xa4\xe8\xf4\xb5\xb8\x2f\xd9\xdb\x30\x4d\xda\x8a\x75\xa4\x10\x0d\xef\x7c\xeb\xf8\xbc\x20\x98\x22\x89\x2a\x7d\x2f\x3b\xeb\x46\xea\x8c\xe8\x30\x87\xab\x1c\xae\x0a\x7f\xe8\x9e\x6e\xf8\x27\xcb\x38\xbd\x6e\x15\xc0\x26\x42\x1c\xc9\x4d\x1f\x66\x5a\xce\x61\xfa\x15\x6b\xb8\x63\xbf\x34\xa6\x6d\xf0\x92\xec\xc1\xca\x8f\x50\x2b\x2d\x43\x14\xd0\x2d\xc4\x2d\x3e\x4a\x73\xfd\x96\x4c\xab\xff\xa1\x4e\xf6\x00\x86\x6f\xf7\x4c\xc2\x60\x88\xb5\x1d\x5c\x67\x0b\xe4\xd5\x69\x73\x6d\xd8\xf7\x86\xcf\x80\xf7\x14\x30\x5b\xe2\x31\x07\xa4\x02\xf8\x38\x9a\x3e\xbd\x8f\x86\x6f\x6e\xea\x65\xd4\x3d\xdb\xf6\x96\x19\x95\xa6\xe7\x53\x69\x9b\x89\xa3\x5c\x86\x79\x40\x01\xfb\xdd\x0a\xe0\x51\x6d\xd5\x5f\x00\x00\x00\xff\xff\x56\xe3\xb9\x04\xf2\x01\x00\x00")

func configJsonBytes() ([]byte, error) {
	return bindataRead(
		_configJson,
		"config.json",
	)
}

func configJson() (*asset, error) {
	bytes, err := configJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.json", size: 498, mode: os.FileMode(420), modTime: time.Unix(1567404212, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _paramsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd2\x41\x6f\x82\x30\x18\x06\xe0\xbb\xbf\xc2\x70\xda\xb2\x51\xa7\x73\xc6\x78\xda\xb2\xcb\x76\xdc\x2f\x30\x6d\xf9\x84\xc6\xc2\xd7\xb4\x5f\x21\x66\xd9\x7f\x5f\xa4\x42\xb0\x12\xbc\xbe\x7d\x9f\xbc\x90\xf6\x77\x36\x9f\x27\x19\x96\x5c\x55\x7b\x6e\x8c\x93\x98\x41\xb2\x9b\x27\x05\x91\x71\xbb\xc5\xa2\xcb\xd2\xfa\x35\x2d\x7c\x8e\xac\x01\xc1\xb8\x31\xc9\xf3\x00\x1e\xbd\x80\x4c\x0c\x59\x48\xd2\x7a\x35\x8d\x6a\xee\x35\xc5\xae\x0d\xd3\x7a\x39\x4d\x0f\x68\xcb\x58\x9e\xb3\x49\x68\x0a\x6e\x4b\xb0\x43\x77\x89\xee\xee\x49\x15\xaf\x49\x75\x17\xb9\x42\x81\xce\x62\x18\xd2\x49\x2c\x4e\x04\xc2\x2b\x9d\x81\x75\x43\x7e\xce\x59\x7f\x30\x14\x25\xb7\x47\x20\xa3\xb9\xbc\xba\xbf\x41\xcc\x46\xb0\xd0\x98\xef\xbd\xd5\x57\x1b\x1a\xf3\xb1\xae\xd3\x5c\x1e\xe3\x72\x1b\xb2\xee\x95\x30\x89\x65\x28\xe7\x8a\x0a\x2f\xe2\x76\x48\xcf\xad\xfe\x61\x85\x3a\x35\x8a\x08\x6c\xdc\xbf\xc4\x2d\xf8\x30\xc6\x7d\x62\x06\x5f\x3f\x81\x1c\xb8\x04\x81\x78\xf3\x45\x4d\xd3\xb0\xee\x6c\x64\xe9\x84\x9e\xbc\x80\x31\x75\x39\x6a\x91\xec\xf7\xbe\x2b\x19\xa4\xc4\x8a\xb8\xa4\x3d\x94\x5c\xb5\xd6\x79\x63\xd0\xd2\xfb\xed\xdf\x77\x55\x53\x60\xd5\x5e\xc7\xd3\xf2\x61\xf3\xf6\xf2\xb8\x5a\x2f\xd3\xed\x7a\xbb\x49\x66\x7f\xff\x01\x00\x00\xff\xff\x78\xac\xdc\xe8\x79\x03\x00\x00")

func paramsJsonBytes() ([]byte, error) {
	return bindataRead(
		_paramsJson,
		"params.json",
	)
}

func paramsJson() (*asset, error) {
	bytes, err := paramsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "params.json", size: 889, mode: os.FileMode(420), modTime: time.Unix(1567404998, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.json": configJson,
	"params.json": paramsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.json": &bintree{configJson, map[string]*bintree{}},
	"params.json": &bintree{paramsJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
