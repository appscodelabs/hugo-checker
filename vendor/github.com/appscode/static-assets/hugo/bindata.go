// Package hugo Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// config.json
// params.dev.json
// params.json
package hugo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x92\xcd\x6e\x83\x30\x10\x84\xef\x3c\x85\xe5\x73\x52\xda\x1e\xf3\x0c\xe9\xa5\x52\x4f\x55\x0e\x8b\x59\xc0\xe2\x67\xd1\x7a\x21\x6a\xab\xbc\x7b\xb5\xc6\x86\xf6\x14\x66\x3d\x3b\xfe\x3c\xca\x4f\x61\x8c\x85\x10\x50\x82\xbd\x18\x55\xc6\x58\xc6\x99\x3e\xde\xaf\xf6\x62\x6c\x27\x32\x87\x4b\x59\xb6\x5e\xba\xa5\x7a\x72\x34\x96\x30\xcf\xc1\x51\x8d\x65\x10\x10\xef\xce\x69\xfb\xb4\xed\xae\xc8\xc1\xd3\xa4\xbb\x23\x04\x41\xce\x07\xb5\xe7\xe3\x0a\xd5\x20\xa0\xae\xf8\x7b\xca\x53\x3f\x42\x8b\xea\xb3\x5b\x7a\xb9\xa5\x97\x69\xbe\xfb\x1a\x3f\xfc\xb3\x6d\x3a\x9e\x3e\x0a\x63\x1e\x6a\xb4\x6e\xa0\xa5\x56\xd7\xe7\x86\x00\xf7\x1d\x13\xbe\x17\xc6\x2c\x5a\x87\x07\x65\xeb\x05\x06\x72\x08\x53\x9e\x0d\x7e\xa2\x7a\x77\xd0\x8c\x53\x10\x70\x7d\x1e\xcc\xe0\x7a\x94\xac\x2a\x60\x1c\x51\x60\xd8\x13\xc9\xf5\xc8\x8a\x76\x8b\x50\x23\xf8\xe9\x0d\xa7\xe5\xa8\xdb\x3d\x2b\xa2\xed\x97\x0a\xeb\xca\x9e\xe2\x9b\x42\xa7\x1f\x3a\x5a\x61\x19\x44\x45\xbb\x00\xd7\xf6\x96\x62\xdd\x4b\x5c\x5a\xe9\x0b\x5a\x2d\xd9\xd8\x70\xf7\x4d\x34\x06\x04\x76\xdd\xe0\xdb\x2e\x49\x5e\xbd\xc3\x73\xc5\xa4\x20\x7b\xc0\x6b\x0c\x98\x3b\xe0\x71\x0b\xd0\xdb\x1a\xe2\x31\x7f\xd7\xf6\xb6\x57\xd9\x10\x09\xf2\xd5\x4f\xfd\x9f\x3e\x33\xf1\xa6\x12\xf5\x71\x94\xc8\xd3\xff\x22\x83\xa6\xca\xe3\x63\x72\x83\x89\x41\x3b\x2a\x1e\xc5\x6f\x00\x00\x00\xff\xff\x59\x69\x2c\x9f\x94\x02\x00\x00")

func configJsonBytes() ([]byte, error) {
	return bindataRead(
		_configJson,
		"config.json",
	)
}

func configJson() (*asset, error) {
	bytes, err := configJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.json", size: 660, mode: os.FileMode(420), modTime: time.Unix(1567968430, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _paramsDevJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xd2\x41\x6f\x82\x30\x18\x06\xe0\xbb\xbf\xc2\x70\xda\xb2\x51\xa7\x73\xc6\x78\xda\xb2\xcb\x76\xdc\x2f\x30\x6d\xf9\x84\xc6\xc2\xd7\xb4\x5f\x21\x66\xd9\x7f\x5f\xa4\x42\xb0\x12\xbc\xbe\x7d\x9f\xbc\x90\xf6\x77\x36\x9f\x27\x19\x96\x5c\x55\x7b\x6e\x8c\x93\x98\x41\xb2\x9b\x27\x05\x91\x71\xbb\xc5\xa2\xcb\xd2\xfa\x35\x2d\x7c\x8e\xac\x01\xc1\xb8\x31\xc9\xf3\x00\x1e\xbd\x80\x4c\x0c\x59\x48\xd2\x7a\x35\x8d\x6a\xee\x35\xc5\xae\x0d\xd3\x7a\x39\x4d\x0f\x68\xcb\x58\x9e\xb3\x49\x68\x0a\x6e\x4b\xb0\x43\x77\x89\xee\xee\x49\x15\xaf\x49\x75\x17\xb9\x42\x81\xce\x62\x18\xd2\x49\x2c\x4e\x04\xc2\x2b\x9d\x81\x75\x43\x7e\xce\x59\x7f\x30\x14\x25\xb7\x47\x20\xa3\xb9\xbc\xba\xbf\x41\xcc\x46\xb0\xd0\x98\xef\xbd\xd5\x57\x1b\x1a\xf3\xb1\xae\xd3\x5c\x1e\xe3\x72\x1b\xb2\xee\x95\x30\x89\x65\x28\xe7\x8a\x0a\x2f\xe2\x76\x48\xcf\xad\xfe\x61\x85\x3a\x35\x8a\x08\x6c\xdc\xbf\xc4\x2d\xf8\x30\xc6\x7d\x62\x06\x5f\x3f\x81\x1c\xb8\x04\x81\x78\xf3\x45\x4d\xd3\xb0\xee\x6c\x64\xe9\x84\x9e\xbc\x80\x31\x75\x39\x6a\x91\xec\xf7\xbe\x2b\x19\xa4\xc4\x8a\xb8\xa4\x3d\x94\x5c\xb5\xd6\x79\x63\xd0\xd2\xfb\xed\xdf\x77\x55\x53\x60\xd5\x5e\xc7\xd3\xf2\x61\xf3\xf6\xf2\xb8\x5a\x2f\xd3\xed\x7a\xbb\x49\x66\x7f\xff\x01\x00\x00\xff\xff\x78\xac\xdc\xe8\x79\x03\x00\x00")

func paramsDevJsonBytes() ([]byte, error) {
	return bindataRead(
		_paramsDevJson,
		"params.dev.json",
	)
}

func paramsDevJson() (*asset, error) {
	bytes, err := paramsDevJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "params.dev.json", size: 889, mode: os.FileMode(420), modTime: time.Unix(1567650441, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _paramsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\xc1\x6e\x02\x21\x10\x40\xef\x7e\x85\xd9\x53\x9b\xb6\x58\x1b\x6b\x8c\xa7\x36\xbd\xb4\xc7\x7e\x81\x01\x76\x74\x89\xec\x0e\x81\xa1\x1b\xd3\xf4\xdf\x1b\x41\x37\x08\x5c\xdf\xbc\xc7\xa0\xec\xef\x6c\x3e\x6f\x5a\xec\xb9\x1a\x76\xdc\x18\x27\xb1\x85\x66\x3b\x6f\x3a\x22\xe3\xb6\x8b\xc5\x95\x31\x89\x7d\xf3\x98\xc8\x47\x2f\xa0\x15\xa9\x1a\x49\x55\xfc\xe1\x5e\x53\xee\x06\x58\xd5\xf7\x68\xfb\xdc\x3e\xb3\x42\x36\x1d\xb7\x3d\xd8\xd4\xbd\x20\xa6\xb0\x38\x56\xaa\xfc\x50\x26\x55\x61\xb9\x4e\x81\x6e\x73\x33\xd2\xe2\x02\xe2\x44\x20\xbc\xd2\x2d\x58\x97\x26\x67\xce\xa6\x41\x5a\xf4\xdc\x1e\x81\x8c\xe6\xf2\xe6\x7f\x4e\x30\xab\xc4\x42\xe3\x61\xe7\xad\xbe\xd9\xa1\xf1\x50\x73\x9d\xe6\xf2\x98\xcb\x01\xb2\xf2\x35\x0f\x8a\x3a\x2f\x72\x3b\xd2\xb3\x35\x7d\x00\x51\xa7\x51\x11\x81\xcd\xfd\x0b\x0e\xc1\xbb\x31\xee\x03\x5b\xf8\xfc\x8e\xc9\x9e\x4b\x10\x88\xc5\x8d\xc6\x71\x64\xd7\x59\x65\xd3\x09\x3d\x79\x01\xb5\xea\x32\x0a\x91\x9c\xf6\x7d\x0d\x32\x96\x12\x07\xe2\x92\x76\xd0\x73\x15\x5a\xe7\x8d\x41\x4b\x6f\xe5\xaf\xbf\xaa\xa6\xc3\x21\x3c\xc7\xc3\xf2\x6e\xfd\xfa\x7c\xff\xb2\x5a\x3e\x6d\x56\x9b\x75\x33\xfb\xfb\x0f\x00\x00\xff\xff\x9a\x2b\x9a\x44\x21\x03\x00\x00")

func paramsJsonBytes() ([]byte, error) {
	return bindataRead(
		_paramsJson,
		"params.json",
	)
}

func paramsJson() (*asset, error) {
	bytes, err := paramsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "params.json", size: 801, mode: os.FileMode(420), modTime: time.Unix(1567658838, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.json":     configJson,
	"params.dev.json": paramsDevJson,
	"params.json":     paramsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.json":     &bintree{configJson, map[string]*bintree{}},
	"params.dev.json": &bintree{paramsDevJson, map[string]*bintree{}},
	"params.json":     &bintree{paramsJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
